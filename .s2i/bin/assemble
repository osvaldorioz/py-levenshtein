#!/bin/bash
set -e
set -x  # Enable debug output

# Version 1.3 for Levenshtein project

# Verify system dependencies
if [ ! -f "/usr/include/python3.12/Python.h" ]; then
    echo "Error: Python.h not found. Ensure python3-devel is installed in the builder image."
    exit 1
fi
if ! command -v g++ >/dev/null 2>&1; then
    echo "Error: g++ not found. Ensure gcc-c++ is installed in the builder image."
    exit 1
fi
if ! command -v make >/dev/null 2>&1; then
    echo "Error: make not found. Ensure make is installed in the builder image."
    exit 1
fi
if ! command -v python3 >/dev/null 2>&1; then
    echo "Error: python3 not found. Ensure python3 is installed in the builder image."
    exit 1
fi
if ! command -v file >/dev/null 2>&1; then
    echo "Error: file not found. Ensure file is installed in the builder image."
    exit 1
fi

# Change to source directory
cd /tmp/src

# List contents of /tmp/src for debugging
echo "Contents of /tmp/src:"
ls -la /tmp/src

# Create necessary directories
mkdir -p /opt/app-root/src/python
mkdir -p /opt/app-root/src/wheels

# Copy Python files to /opt/app-root/src/python
echo "Copying .py files to /opt/app-root/src/python/"
if [ -d "/tmp/src/python" ]; then
    cp -v /tmp/src/python/*.py /opt/app-root/src/python/ || echo "No .py files found in /tmp/src/python"
else
    echo "Looking for .py files in /tmp/src"
    cp -v /tmp/src/*.py /opt/app-root/src/python/ || echo "No .py files found in /tmp/src"
fi

# Copy requirements.txt if exists
if [ -f /tmp/src/requirements.txt ]; then
    echo "Copying requirements.txt to /opt/app-root/src/"
    cp -v /tmp/src/requirements.txt /opt/app-root/src/
else
    echo "Warning: requirements.txt not found in /tmp/src"
fi

# Copy wheels directory to /opt/app-root/src/wheels
echo "Copying wheels directory to /opt/app-root/src/wheels/"
if [ -d "/tmp/src/wheels" ]; then
    cp -r /tmp/src/wheels/* /opt/app-root/src/wheels/ || { echo "Error copying wheels directory"; exit 1; }
else
    echo "Error: Directory /tmp/src/wheels not found"
    exit 1
fi

# Install wheels from the wheels directory
echo "Installing dependencies from .whl files in /opt/app-root/src/wheels/"
if [ -d /opt/app-root/src/wheels ]; then
    python3.12 -m pip install --no-cache-dir --no-index --find-links /opt/app-root/src/wheels/ -r /opt/app-root/src/requirements.txt || { echo "Error installing Python dependencies from wheels"; exit 1; }
else
    echo "Error: /opt/app-root/src/wheels directory not found after copy"
    exit 1
fi

# Compile levdes.so
echo "Compiling levdes.so..."
g++ -O3 -Wall -shared -std=c++14 -fPIC $(python3 -m pybind11 --includes) \
    /tmp/src/binding.cpp /tmp/src/levenshtein_core.cpp \
    -o /opt/app-root/src/python/levdes.so \
    -I/usr/include/python3.12 \
    -L/opt/app-root/lib64 \
    -L/usr/lib64 \
    || { echo "Error compiling levdes.so"; exit 1; }

# Verify levdes.so exists and has correct permissions
echo "Verifying presence of /opt/app-root/src/python/levdes.so"
ls -la /opt/app-root/src/python/ || echo "Directory /opt/app-root/src/python not found"
if [ ! -f "/opt/app-root/src/python/levdes.so" ]; then
    echo "Error: /opt/app-root/src/python/levdes.so not found"
    exit 1
fi
chmod 755 /opt/app-root/src/python/levdes.so

# Set PYTHONPATH to include /opt/app-root/src/python
export PYTHONPATH=/opt/app-root/src/python:$PYTHONPATH
echo "PYTHONPATH configured: $PYTHONPATH"

# Set permissions for /opt/app-root/src
chown -R 1001:0 /opt/app-root/src
chmod -R g+rw /opt/app-root/src

echo "Assemble completed successfully."
touch /opt/app-root/src/.s2i
